{{- define "stackstate.checks.deployment.container.init" -}}
name: server-init
command:
- sh
- -c
- |
  /entrypoint -c {{ include "stackstate.kafka.endpoint" . }},{{ include "stackstate.zookeeper.endpoint" . }},{{ .Release.Name }}-hbase-hdfs-nn-headful:9000,{{ template "common.fullname.short" . }}-initializer:1618 -t 300
image: "{{include "stackstate.wait.image.registry" .}}/{{ .Values.stackstate.components.wait.image.repository }}:{{ .Values.stackstate.components.wait.image.tag }}"
imagePullPolicy: {{ .Values.stackstate.components.wait.image.pullPolicy | quote }}
{{- end -}}

{{- define "stackstate.checks.deployment.container.main" -}}
args:
{{- include "stackstate.service.args" . }}
- -startRole
- checks
env:
{{- $serviceConfig := dict "ServiceName" "checks" "ServiceConfig" .Values.stackstate.components.checks }}
{{- include "stackstate.service.envvars" (merge $serviceConfig .) }}
{{- include "stackstate.authentication.envvars" . }}
{{- include "stackstate.baseurls.envvars" . }}
- name: API_KEY
  valueFrom:
    secretKeyRef:
      name: {{ template "common.fullname.short" . }}-receiver
      key: sts-receiver-api-key
- name: ELASTICSEARCH_URI
  value: "http://{{ include "stackstate.es.endpoint" . }}"
- name: KAFKA_BROKERS
  value: {{ include "stackstate.kafka.endpoint" . | quote }}
- name: HADOOP_USER_NAME
  value: nobody
- name: LICENSE_KEY
  valueFrom:
    secretKeyRef:
      name: {{ template "common.fullname.short" . }}-license
      key: sts-license-key
- name: ZOOKEEPER_QUORUM
  value: {{ include "stackstate.zookeeper.endpoint" . | quote }}
  # No need to keep cached items for a long time
- name: CONFIG_FORCE_stackgraph_vertex_cache_expireAfterSeconds
  value: "600"
- name: CONFIG_FORCE_stackgraph_vertex_cache_sizePercentage
  value: "10"
- name: CONFIG_FORCE_stackstate_domainActorPool_fractionOfMemoryReservedForChecks
  value: "0.80"
image: "{{ include "stackstate.image.registry" . }}/{{ .Values.stackstate.components.checks.image.repository }}{{ .Values.stackstate.components.all.image.repositorySuffix }}:{{ default .Values.stackstate.components.all.image.tag .Values.stackstate.components.checks.image.tag }}"
imagePullPolicy: {{ default .Values.stackstate.components.all.image.pullPolicy .Values.stackstate.components.checks.image.pullPolicy | quote }}
name: checks
ports:
- containerPort: 1618
  name: health
- containerPort: 7080
  name: instance
{{- if .Values.stackstate.components.all.metrics.enabled }}
- containerPort: 9404
  name: metrics
{{- end }}
readinessProbe:
  httpGet:
    path: /readiness
    port: health
  initialDelaySeconds: 10
  timeoutSeconds: 5
livenessProbe:
  httpGet:
    path: /liveness
    port: health
  initialDelaySeconds: 60
  timeoutSeconds: 5
{{- with .Values.stackstate.components.checks.resources }}
resources:
  {{- toYaml . | nindent 2 }}
{{- end }}
volumeMounts:
- name: config-secrets-volume
  mountPath: /opt/docker/etc/application_stackstate.conf
  subPath: application_stackstate.conf
{{- include "stackstate.service.container.volumes" . }}
{{- end -}}

{{- define "stackstate.checks.deployment" -}}
{{- $commonContainer := fromYaml (include "common.container" .) -}}
{{- $overrideContainer := fromYaml (include "stackstate.checks.deployment.container.main" .) -}}
{{- $stsStackstateStateMainContainer := (merge $overrideContainer $commonContainer) -}}
{{- $overrideContainer := fromYaml (include "stackstate.checks.deployment.container.init" .) -}}
{{- $stsStackstateServerInitContainer := (merge $overrideContainer $commonContainer) -}}
{{- $overrideContainer := fromYaml (include "stackstate.initContainer.ensure.no.server.statefulset.pods.are.running" .) -}}
{{- $stsStackstateServerEnsureNoServerStatefulSetPodsAreRunningContainer := (merge $overrideContainer $commonContainer) -}}

metadata:
  name: {{ template "common.fullname.short" . }}-checks
  labels:
    app.kubernetes.io/component: checks
    stackstate.com/connects-to-stackgraph: "true"
    stackstate.com/replicas: "1"
spec:
  replicas: {{ .Values.stackstate.components.checks.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/component: checks
  strategy:
{{- if eq (lower .Values.stackstate.components.all.deploymentStrategy.type) "recreatesingletonsonly" }}
    type: Recreate
{{- else }}
    {{- toYaml .Values.stackstate.components.all.deploymentStrategy | nindent 4 }}
{{- end }}
  template:
    metadata:
      annotations:
        {{- include "common.metrics.annotations" (dict "metrics" .Values.stackstate.components.all.metrics "port" "9404" "container_name" "checks" "filter" .Values.stackstate.components.checks.agentMetricsFilter) | indent 8 }}
        {{- include "stackstate.common.secret.checksum" . | nindent 8 }}
        {{- include "stackstate.license.secret.checksum" . | nindent 8 }}
        {{- include "stackstate.checks.secret.checksum" . | nindent 8 }}
      labels:
        app.kubernetes.io/component: checks
    spec:
      serviceAccountName: {{ template "common.fullname.short" . }}-checks
      {{- include "stackstate.image.pullSecret.name" (dict "images" (list .Values.stackstate.components.all.image) "context" $) | nindent 6 }}
      initContainers:
      - {{ toYaml $stsStackstateServerInitContainer | nindent 8 }}
      - {{ toYaml $stsStackstateServerEnsureNoServerStatefulSetPodsAreRunningContainer | nindent 8 }}
      containers:
      - {{ toYaml $stsStackstateStateMainContainer | nindent 8 }}
    {{- if or .Values.stackstate.components.all.nodeSelector .Values.stackstate.components.checks.nodeSelector }}
      nodeSelector:
      {{- with .Values.stackstate.components.all.nodeSelector }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.stackstate.components.checks.nodeSelector }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- end }}
    {{- if or .Values.stackstate.components.all.affinity .Values.stackstate.components.checks.affinity }}
      affinity:
      {{- with .Values.stackstate.components.all.affinity }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.stackstate.components.checks.affinity }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- end }}
    {{- if or .Values.stackstate.components.all.tolerations .Values.stackstate.components.checks.tolerations }}
      tolerations:
      {{- with .Values.stackstate.components.all.tolerations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.stackstate.components.checks.tolerations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- end }}
    {{- if .Values.stackstate.components.all.securityContext.enabled }}
      securityContext: {{- omit .Values.stackstate.components.all.securityContext "enabled" | toYaml | nindent 8 }}
    {{- end }}
      volumes:
        - name: config-secrets-volume
          secret:
            secretName: {{ template "common.fullname.short" . }}-checks
        {{- include "stackstate.service.pod.volumes" (dict "pod_name" "checks" "root" . ) | nindent 8 }}
{{- end -}}

{{- if .Values.stackstate.experimental.server.split }}
{{- $commonDeployment := fromYaml (include "common.deployment" .) -}}
{{- $checksDeployment := fromYaml (include "stackstate.checks.deployment" .) -}}
{{- toYaml (merge $checksDeployment $commonDeployment) -}}
{{- end}}
