{{- if .Values.backup.enabled }}
{{- if .Values.backup.stackGraph.scheduled.enabled }}
{{- if .Capabilities.APIVersions.Has "batch/v1/CronJob" }}
apiVersion: batch/v1
{{- else }}
apiVersion: batch/v1beta1
{{- end }}
kind: CronJob
metadata:
  name: {{ template "common.fullname.short" . }}-backup-stackgraph
  labels:
    app.kubernetes.io/component: backup
spec:
  concurrencyPolicy: Forbid
  schedule: {{ .Values.backup.stackGraph.scheduled.schedule | quote }}
  jobTemplate:
    metadata:
      labels:
        app.kubernetes.io/component: backup
    spec:
      backoffLimit: 1
      ttlSecondsAfterFinished: 600
      template:
        metadata:
          labels:
            app.kubernetes.io/component: backup
        spec:
          initContainers:
            - name: wait
              command:
                - sh
                - -c
                - |
                  /entrypoint -c {{ include "stackstate.es.endpoint" . }},{{ include "stackstate.minio.endpoint" . }},{{ include "stackstate.zookeeper.endpoint" . }},{{ .Release.Name }}-hbase-hdfs-nn-headful:9000,{{ template "common.fullname.short" . }}-{{- if .Values.stackstate.experimental.server.split }}initializer:1618{{ else }}server-headless:7070{{ end }} -t 300
              image: "{{include "stackstate.wait.image.registry" .}}/{{ .Values.stackstate.components.wait.image.repository }}:{{ .Values.stackstate.components.wait.image.tag }}"
              imagePullPolicy: Always
          containers:
            - name: backup-stackgraph
              image: "{{ include "stackstate.image.registry" . }}/{{ .Values.stackstate.components.server.image.repository }}{{ .Values.stackstate.components.all.image.repositorySuffix }}:{{ default .Values.stackstate.components.all.image.tag .Values.stackstate.components.server.image.tag }}"
              imagePullPolicy: {{ default .Values.stackstate.components.all.image.pullPolicy .Values.stackstate.components.server.image.pullPolicy | quote }}
              command:
                - '/backup-restore-scripts/backup-stackgraph.sh'
              env:
                {{- include "stackstate.backup.envvars" . | nindent 16 }}
                - name: ZOOKEEPER_QUORUM
                  value: stackstate-zookeeper-headless:2181
              {{- with .Values.stackstate.components.backup.resources }}
              resources:
                {{- toYaml . | nindent 16 }}
              {{- end }}
              volumeMounts:
                {{- include "stackstate.backup.volumeMounts" . | nindent 16 }}
                - name: tmp-data
                  mountPath: /tmp-data
          {{- include "stackstate.image.pullSecret.name" (dict "images" (list .Values.stackstate.components.all.image) "context" $) | nindent 10 }}
          volumes:
            {{- include "stackstate.backup.volumes" . | nindent 12 }}
            - name: tmp-data
              persistentVolumeClaim:
                claimName: {{ template "common.fullname.short" . }}-backup-stackgraph-tmp-data
        {{- if .Values.backup.stackGraph.securityContext.enabled }}
          securityContext: {{- omit .Values.backup.stackGraph.securityContext "enabled" | toYaml | nindent 12 }}
        {{- end }}
          restartPolicy: Never
{{- end }}
---
{{- if .Values.backup.configuration.scheduled.enabled }}
{{- if .Capabilities.APIVersions.Has "batch/v1/CronJob" }}
apiVersion: batch/v1
{{- else }}
apiVersion: batch/v1beta1
{{- end }}
kind: CronJob
metadata:
  name: {{ template "common.fullname.short" . }}-backup-conf
  labels:
    app.kubernetes.io/component: backup
spec:
  concurrencyPolicy: Forbid
  schedule: {{ .Values.backup.configuration.scheduled.schedule | quote }}
  jobTemplate:
    metadata:
      labels:
        app.kubernetes.io/component: backup
    spec:
      backoffLimit: 1
      ttlSecondsAfterFinished: 600
      template:
        metadata:
          labels:
            app.kubernetes.io/component: backup
        spec:
          initContainers:
            - name: wait
              command:
                - sh
                - -c
                - |
                  /entrypoint -c {{ include "stackstate.minio.endpoint" . }},{{ template "common.fullname.short" . }}-{{- if .Values.stackstate.experimental.server.split }}initializer:1618{{ else }}server-headless:7070{{ end }} -t 300
              image: "{{include "stackstate.wait.image.registry" .}}/{{ .Values.stackstate.components.wait.image.repository }}:{{ .Values.stackstate.components.wait.image.tag }}"
              imagePullPolicy: Always
          containers:
            - name: backup-configuration
              image: "{{include "stackstate.containerTools.image.registry" .}}/{{ .Values.stackstate.components.containerTools.image.repository }}:{{ .Values.stackstate.components.containerTools.image.tag }}"
              imagePullPolicy: {{ .Values.stackstate.components.containerTools.image.pullPolicy | quote }}
              command:
                - '/backup-restore-scripts/backup-configuration.sh'
              env:
                {{- include "stackstate.backup.envvars" . | nindent 16 }}
              {{- with .Values.stackstate.components.containerTools.resources }}
              resources:
                {{- toYaml . | nindent 16 }}
              {{- end }}
              volumeMounts:
                {{- include "stackstate.backup.volumeMounts" . | nindent 16 }}
          {{- include "stackstate.image.pullSecret.name" (dict "images" (list .Values.stackstate.components.all.image) "context" $) | nindent 10 }}
          volumes:
            {{- include "stackstate.backup.volumes" . | nindent 12 }}
        {{- if .Values.backup.stackGraph.securityContext.enabled }}
          securityContext: {{- omit .Values.backup.stackGraph.securityContext "enabled" | toYaml | nindent 12 }}
        {{- end }}
          restartPolicy: Never
          serviceAccountName: {{ template "common.fullname.short" . }}-backup
{{- end }}

{{- end }}
