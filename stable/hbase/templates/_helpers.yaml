{{/* vim: set filetype=mustache: */}}
{{/*
Expand the name of the chart.
*/}}
{{- define "hadoop.name" -}}
{{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" -}}
{{- end -}}

{{/*
Expand the name of the chart.
*/}}
{{- define "hbase.name" -}}
{{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" -}}
{{- end -}}

{{/*
Get and use nested subchart templates with the proper context. The reason this is needed is because when pulling
in a subchart (like ZooKeeper), the subchart will create objects based on it's own 'fullName' template. That 'fullName'
template is often needed within a parent chart to reference a created Service / Secret / etc. objects for use in the
parent chart.
*/}}
{{- define "call-nested" }}
{{- $dot := index . 0 }}
{{- $subchart := index . 1 }}
{{- $template := index . 2 }}
{{- include $template (dict "Chart" (dict "Name" $subchart) "Values" (index $dot.Values $subchart) "Release" $dot.Release "Capabilities" $dot.Capabilities) }}
{{- end }}

{{/*
Common environment variables for HDFS configuration.
We use HDFS_CONF_dfs_namenode_replication_min to ensure the desired amount of replicas to be written or fail the write op see https://stackoverflow.com/questions/23799658/hadoop-replication-factor-confusion
*/}}
{{- define "hbase.hdfs.commonEnv" }}
- name: CORE_CONF_fs_defaultFS
  value: "hdfs://{{ template "common.fullname.short" . }}-hdfs-nn-headful:9000/"
- name: HDFS_CONF_dfs_client_retry_policy_enabled
  value: "true"
- name: HDFS_CONF_dfs_client_retry_policy_spec
  value: "1000,6,2000,10"
- name: HDFS_CONF_dfs_datanode_data_dir
  value: "/hadoop-data/data"
- name: HDFS_CONF_dfs_namenode_checkpoint_dir
  value: "/hadoop-data/data"
- name: HDFS_CONF_dfs_namenode_name_dir
  value: "/hadoop-data/data"
- name: HDFS_CONF_dfs_namenode_safemode_threshold___pct
  value: "0.9f"
- name: HDFS_CONF_dfs_replication
  value: "2"
- name: HDFS_CONF_dfs_namenode_replication_min
  {{- if gt .Values.hdfs.datanode.replicaCount .Values.hdfs.minReplication  }}
  value: {{ .Values.hdfs.minReplication | quote }}
  {{- else }}
  value: {{ .Values.hdfs.datanode.replicaCount | quote }}
  {{- end }}
- name: HDFS_CONF_dfs_client_block_write_replace___datanode___on___failure_enable
  value: "true"
- name: HDFS_CONF_dfs_client_block_write_replace___datanode___on___failure_policy
  value: "ALWAYS"
{{- end }}

{{/*
Common environment variables for HBase configuration.
*/}}
{{- define "hbase.hbase.commonEnv" }}
- name: HBASE_CONF_data_tx_zookeeper_quorum
  value: {{ include "hbase.zookeeper.endpoint" . | quote }}
- name: HBASE_CONF_hbase_rootdir
  value: "hdfs://{{ template "common.fullname.short" . }}-hdfs-nn-headful:9000/hbase"
- name: HBASE_CONF_hbase_zookeeper_quorum
  value: {{ include "hbase.zookeeper.endpoint" . | quote }}
{{- end }}

{{/*
Common extra environment variables for all processes inherited through `all.extraEnv`
*/}}
{{- define "all.commonEnv" -}}
{{- if .Values.all.extraEnv.open }}
  {{- range $key, $value := .Values.all.extraEnv.open  }}
- name: {{ $key }}
  value: {{ $value | quote }}
  {{- end }}
{{- end }}
{{- if .Values.all.extraEnv.secret }}
  {{- range $key, $value := .Values.all.extraEnv.secret  }}
- name: {{ $key }}
  valueFrom:
    secretKeyRef:
      name: {{ template "common.fullname.short" $ }}-common
      key: {{ $key }}
  {{- end }}
{{- end }}
- name: HADOOP_USER_NAME
  value: nobody
{{- end -}}

{{/*
HBase master extra environment variables for all processes inherited through `hbase.master.extraEnv`
*/}}
{{- define "hbase.master.commonEnv" -}}
{{- if .Values.hbase.master.extraEnv.open }}
  {{- range $key, $value := .Values.hbase.master.extraEnv.open  }}
- name: {{ $key }}
  value: {{ $value | quote }}
  {{- end }}
{{- end }}
{{- if .Values.hbase.master.extraEnv.secret }}
  {{- range $key, $value := .Values.hbase.master.extraEnv.secret  }}
- name: {{ $key }}
  valueFrom:
    secretKeyRef:
      name: {{ template "common.fullname.short" $ }}-hbase-master
      key: {{ $key }}
  {{- end }}
{{- end }}
{{- end -}}

{{/*
HBase regionserver extra environment variables for all processes inherited through `hbase.regionserver.extraEnv`
*/}}
{{- define "hbase.regionserver.commonEnv" -}}
{{- if .Values.hbase.regionserver.extraEnv.open }}
  {{- range $key, $value := .Values.hbase.regionserver.extraEnv.open  }}
- name: {{ $key }}
  value: {{ $value | quote }}
  {{- end }}
{{- end }}
{{- if .Values.hbase.regionserver.extraEnv.secret }}
  {{- range $key, $value := .Values.hbase.regionserver.extraEnv.secret  }}
- name: {{ $key }}
  valueFrom:
    secretKeyRef:
      name: {{ template "common.fullname.short" $ }}-hbase-rs
      key: {{ $key }}
  {{- end }}
{{- end }}
{{- end -}}

{{/*
HDFS datanode extra environment variables for all processes inherited through `hdfs.datanode.extraEnv`
*/}}
{{- define "hdfs.datanode.commonEnv" -}}
{{- if .Values.hdfs.datanode.extraEnv.open }}
  {{- range $key, $value := .Values.hdfs.datanode.extraEnv.open  }}
- name: {{ $key }}
  value: {{ $value | quote }}
  {{- end }}
{{- end }}
{{- if .Values.hdfs.datanode.extraEnv.secret }}
  {{- range $key, $value := .Values.hdfs.datanode.extraEnv.secret  }}
- name: {{ $key }}
  valueFrom:
    secretKeyRef:
      name: {{ template "common.fullname.short" $ }}-hdfs-dn
      key: {{ $key }}
  {{- end }}
{{- end }}
{{- end -}}

{{/*
HDFS namenode extra environment variables for all processes inherited through `hdfs.namenode.extraEnv`
*/}}
{{- define "hdfs.namenode.commonEnv" -}}
{{- if .Values.hdfs.namenode.extraEnv.open }}
  {{- range $key, $value := .Values.hdfs.namenode.extraEnv.open  }}
- name: {{ $key }}
  value: {{ $value | quote }}
  {{- end }}
{{- end }}
{{- if .Values.hdfs.namenode.extraEnv.secret }}
  {{- range $key, $value := .Values.hdfs.namenode.extraEnv.secret  }}
- name: {{ $key }}
  valueFrom:
    secretKeyRef:
      name: {{ template "common.fullname.short" $ }}-hdfs-nn
      key: {{ $key }}
  {{- end }}
{{- end }}
{{- end -}}

{{/*
HDFS secondarynamenode extra environment variables for all processes inherited through `hdfs.secondarynamenode.extraEnv`
*/}}
{{- define "hdfs.secondarynamenode.commonEnv" -}}
{{- if .Values.hdfs.secondarynamenode.extraEnv.open }}
  {{- range $key, $value := .Values.hdfs.secondarynamenode.extraEnv.open  }}
- name: {{ $key }}
  value: {{ $value | quote }}
  {{- end }}
{{- end }}
{{- if .Values.hdfs.secondarynamenode.extraEnv.secret }}
  {{- range $key, $value := .Values.hdfs.secondarynamenode.extraEnv.secret  }}
- name: {{ $key }}
  valueFrom:
    secretKeyRef:
      name: {{ template "common.fullname.short" $ }}-hdfs-snn
      key: {{ $key }}
  {{- end }}
{{- end }}
{{- end -}}

{{/*
Tephra extra environment variables for all processes inherited through `tephra.extraEnv`
*/}}
{{- define "tephra.commonEnv" -}}
{{- if .Values.tephra.extraEnv.open }}
  {{- range $key, $value := .Values.tephra.extraEnv.open  }}
- name: {{ $key }}
  value: {{ $value | quote }}
  {{- end }}
{{- end }}
{{- if .Values.tephra.extraEnv.secret }}
  {{- range $key, $value := .Values.tephra.extraEnv.secret  }}
- name: {{ $key }}
  valueFrom:
    secretKeyRef:
      name: {{ template "common.fullname.short" $ }}-tephra
      key: {{ $key }}
  {{- end }}
{{- end }}
{{- end -}}

{{/*
Console extra environment variables for all processes inherited through `console.extraEnv`
*/}}
{{- define "console.commonEnv" -}}
{{- if .Values.console.extraEnv.open }}
  {{- range $key, $value := .Values.console.extraEnv.open  }}
- name: {{ $key }}
  value: {{ $value | quote }}
  {{- end }}
{{- end }}
{{- if .Values.console.extraEnv.secret }}
  {{- range $key, $value := .Values.console.extraEnv.secret  }}
- name: {{ $key }}
  valueFrom:
    secretKeyRef:
      name: {{ template "common.fullname.short" $ }}-console
      key: {{ $key }}
  {{- end }}
{{- end }}
{{- end -}}
